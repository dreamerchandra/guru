rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /Category/{itemId} {

      allow read: if isSignedIn();

      // FUNCTIONS
      function isSignedIn() {
        return request.auth != null;
      }
  
    }

    match /Rating/{itemId}{

      allow read: if isSignedIn();

      allow create: if isValidRating(request.resource.data) &&
        isOwner(request.resource.data) &&
        checkKeys();

      allow update: if isValidRating(request.resource.data) &&
        isOwner(request.resource.data) &&
        isOwner(resource.data) &&
        isCalm() &&
        checkKeys();

      allow delete: if isOwner(resource.data);

      // FUNCTIONS
      function isSignedIn() {
        return request.auth != null;
      }
  
      function isOwner(rating) {
        return request.auth.uid == rating.createdBy;
      }
  
      function isValidRating(rating) {
        return (
          // rating.createdBy
          rating.createdBy is string &&
          rating.createdBy < '50' &&
          rating.createdBy != '' &&
          // rating.value
          rating.value is number &&
          rating.value >= 0 &&
          rating.value <= 5 &&
          rating.value != '' &&
          // rating.description
          rating.description is string &&
          rating.description < '3' &&
          // rating.cardId
          rating.cardId is string &&
          rating.cardId < '50' &&
          rating.cardId != '' 
        );
      }

      function isCalm() {
        return ( 
          request.time > resource.data.lastModifiedAt +
          duration.value(600, 's')
        ); 
      }

      function checkKeys() {
        let requiredFields = ['createdBy','value','cardId'];
        let optionalFields = ['description'];
        let allFields = requiredFields.concat(optionalFields);
        return request.resource.data.keys().hasAll(requiredFields) &&
        request.resource.data.keys().hasOnly(allFields)
      }
    }

    match /Folder/{itemId}{

      allow read: if isOwner(resource.data) &&
        isSignedIn();

      allow create: if isValidFolder(request.resource.data) &&
        isOwner(request.resource.data) &&
        checkKeys();

      allow update: if isValidFolder(request.resource.data) &&
        isOwner(request.resource.data) &&
        isOwner(resource.data) &&
        isCalm() &&
        checkKeys();

      allow delete: if isOwner(resource.data);

      // FUNCTIONS
      function isSignedIn() {
        return request.auth != null;
      }
  
      function isOwner(folder) {
        return request.auth.uid == folder.createdBy;
      }
  
      function isValidFolder(folder) {
        return (
          // folder.createdBy
          folder.createdBy is string &&
          folder.createdBy.size() < 86 &&
          folder.createdBy != '' &&
          // folder.createdAt
          folder.createdAt is timestamp &&
          folder.createdAt != '' &&
          // folder.lastModifiedAt
          folder.lastModifiedAt is timestamp &&
          folder.lastModifiedAt != '' &&
          // folder.title
          folder.title is string &&
          folder.title.size() < 24 &&
          folder.title.size() > 2
        );
      }

      function isCalm() {
        return ( 
          request.time > resource.data.lastModifiedAt +
          duration.value(10, 's')
        ); 
      }

      function checkKeys() {
        let requiredFields = ['createdBy','createdAt','lastModifiedAt','title'];
        let optionalFields = [];
        let allFields = requiredFields.concat(optionalFields);
        return request.resource.data.keys().hasAll(requiredFields) &&
        request.resource.data.keys().hasOnly(allFields)
      }
    }
    match /Chapter/{itemId}{

      allow read: if isSignedIn() && (isShared(resource.data) || isOwner(resource.data))
        

      allow create: if isValidChapter(request.resource.data) &&
        isOwner(request.resource.data) &&
        checkKeys();

      allow update: if isValidChapter(request.resource.data) &&
        isOwner(request.resource.data) &&
        isOwner(resource.data) &&
        isCalm() &&
        checkKeys();

      allow delete: if isOwner(resource.data);

      // FUNCTIONS

      function isShared(chapter) {
        //FIXME: it should be allowed to only users added as batch
        return true;
        // return chapter.batches.hasAny(request.auth.uid);
      }
      function isSignedIn() {
        return request.auth != null;
      }
  
      function isOwner(chapter) {
        return request.auth.uid == chapter.createdBy;
      }
  
      function isValidChapter(chapter) {
        return (
          // chapter.createdBy
          chapter.createdBy is string &&
          chapter.createdBy.size() < 86 &&
          chapter.createdBy != '' &&
          // chapter.createdAt
          chapter.createdAt is timestamp &&
          chapter.createdAt != '' &&
          // chapter.lastModifiedAt
          chapter.lastModifiedAt is timestamp &&
          chapter.lastModifiedAt != '' &&
          // chapter.title
          chapter.title is string &&
          chapter.title.size() >= 4 &&
          chapter.title.size() <= 50 &&
          // chapter.tag
          chapter.tag is list &&
          chapter.tag != '' &&
          // chapter.titleImg
          chapter.titleImg is string &&
          chapter.titleImg.size() < 200 &&
          // chapter.category
          chapter.category is list &&
          // chapter.folders
          chapter.folders is list &&
          // chapter.keywords
          chapter.keywords is list &&
          // chapter.batches
          chapter.batches is map 
        );
      }

      function isCalm() {
        return ( 
          request.time > resource.data.lastModifiedAt +
          duration.value(10, 's')
        ); 
      }

      function checkKeys() {
        let requiredFields = ['createdBy','createdAt','lastModifiedAt','tag'];
        let optionalFields = ['title','titleImg','category','folders','keywords', 'batches'];
        let allFields = requiredFields.concat(optionalFields);
        return request.resource.data.keys().hasAll(requiredFields) &&
        request.resource.data.keys().hasOnly(allFields)
      }
    }

    match /Batches/{userId}{

      allow read: if isOwner(userId);

      // FUNCTIONS
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
  
    }

    match /Chapter/{id}/Cards/{itemId}{
      allow read: if isSignedIn();

      allow create: if isValidCard(request.resource.data) &&
        isOwner(request.resource.data) &&
        checkKeys();
      
      allow update: if isValidCard(request.resource.data) &&
        isOwner(request.resource.data) &&
        isOwner(resource.data) &&
        isCalm() &&
        checkKeys();
      
      allow delete: if isOwner(resource.data);

      function isSignedIn() {
        return request.auth != null;
      }
  
      function isOwner(rating) {
        return request.auth.uid == rating.createdBy;
      }
  
      function isValidCard(card) {
        return (
          // card.createdBy
          card.createdBy is string &&
          card.createdBy.size() < 50 &&
          card.createdBy != '' &&

          // card.type
          card.type is string &&
          card.type == 'question' ||
          card.type == 'concept' &&

          // card.imgUrl
          card.imgUrl is string &&
          card.imgUrl.size() < 1024 

        )
      }

      function isCalm() {
        return ( 
          request.time > resource.data.lastModifiedAt +
          duration.value(10, 's')
        ); 
      }

      function checkKeys() {
        let commonFields = ['lastModifiedAt', 'createdBy', 'type'];
        let conceptFields = ['title', 'description'].concat(commonFields);
        let questionFields = ['question', 'options', 'answerKey'].concat(commonFields);
        return (
            (
              request.resource.data.type == 'question' &&
              request.resource.data.keys().hasAll(questionFields) &&
              request.resource.data.keys().hasOnly(questionFields.concat(['imgUrl']))
            ) || 
            (
              request.resource.data.type == 'concept' && 
              request.resource.data.keys().hasAll(conceptFields) &&
              request.resource.data.keys().hasOnly(conceptFields.concat(['imgUrl']))
            )
          )
      }
    }

    match /User/{id}{
      allow read: if isSignedIn();

      allow create: if isValidUser(request.resource.data) &&
          isOwner();

      allow update: if isValidUser(request.resource.data) &&
          isOwner();

      function isSignedIn() {
        return request.auth != null;
      }

      function isValidUser(user) {
        return (
          user.category is list
        )
      }

      function isOwner(){
        return (request.auth.uid == id)
      }
    }
  }
}